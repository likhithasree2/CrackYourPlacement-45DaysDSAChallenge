1Q. Find All Duplicates in an Array
CODE:
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
      List<Integer> ans=new ArrayList<>();
      HashSet<Integer> st=new HashSet<>();
      for(int i=0;i<nums.length;i++){
        if(st.contains(nums[i])) ans.add(nums[i]);
         st.add(nums[i]);
      } 
      return ans; 
    }
}
=============================================================================================
2Q. Container with Most Water
CODE:
class Solution {
    public int maxArea(int[] height) {
        int maxWater = 0;
        int left = 0;
        int right = height.length - 1;

        while (left < right) {
            int currentWater = Math.min(height[left], height[right]) * (right - left);
            maxWater = Math.max(maxWater, currentWater);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxWater;
    }
}
==========================================================================================
3Q. Four Sum
CODE:
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> list=new ArrayList<>();
        int n=nums.length;
         if(nums==null ||nums.length==0) return list;
         Arrays.sort(nums);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                long tgt=(long)target-nums[j]-nums[i]; 
                int low=j+1;
                int high=nums.length-1;
                while(low<high){
                    int sum=nums[low]+nums[high];
                    if(sum>tgt) high--;
                    else if(sum<tgt) low++;
                    else{
                         List<Integer> quad = new ArrayList<>(); 
                        quad.add(nums[i]);
                        quad.add(nums[j]);
                        quad.add(nums[low]);
                        quad.add(nums[high]);
                        list.add(quad);
                        while(low<high && nums[low]==quad.get(2)) low++;
                        while(low<high && nums[high]==quad.get(3)) high--;
                     
                    }
                }
                while(j+1<n && nums[j]==nums[j+1]) j++;
            }
            while(i+1<n && nums[i]==nums[i+1]) i++;
        }
        return list;
    }
}
===========================================================================================
4Q. Maximum Points You Can Obtain From Cards
CODE:
class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int len = cardPoints.length;
        int st = len - k;
        int end = st;
        int sum = 0;
        int res = 0;
        for(int i = 0; i < k * 2; i++){
            sum += cardPoints[end % len];
            if(i >= k - 1){
                res = Math.max(res, sum);
                sum -= cardPoints[st % len];
                st++;
            }
            end++;
        }
        return res;
    }
}
============================================================================================
5Q. Subarray Sum Equals K
CODE:
class Solution {
    public int subarraySum(int[] arr, int k) {
        HashMap<Integer,Integer>mpp=new HashMap<>();
        mpp.put(0,1);
        int presum=0;int c=0;
        for(int i=0;i<arr.length;i++){
           presum=presum+arr[i];
           int find=presum-k;
           c=c+mpp.getOrDefault(find,0);
           mpp.put(presum,mpp.getOrDefault(presum,0)+1);
        }
        return c;
    }
}
==============================================================================================
6Q. Spiral Matrix
CODE:
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        if (matrix == null || matrix.length == 0) {
            return result;
        }
        
        int rows = matrix.length, cols = matrix[0].length;
        int left = 0, right = cols-1, top = 0, bottom = rows-1;
        
        while (left <= right && top <= bottom) {
            for (int i = left; i <= right; i++) {
                result.add(matrix[top][i]);
            }
            top++;
            
            for (int i = top; i <= bottom; i++) {
                result.add(matrix[i][right]);
            }
            right--;
            
            if (top <= bottom) {
                for (int i = right; i >= left; i--) {
                    result.add(matrix[bottom][i]);
                }
                bottom--;
            }
            
            if (left <= right) {
                for (int i = bottom; i >= top; i--) {
                    result.add(matrix[i][left]);
                }
                left++;
            }
        }
        
        return result;
    }
}
