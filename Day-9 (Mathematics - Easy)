1Q. Add Binary
CODE
class Solution {
    public String addBinary(String a, String b) {
        int i = a.length()-1;
        int j = b.length()-1;
        int carry=0;
        StringBuilder sb = new StringBuilder();
        while(i>=0 || j>=0 || carry==1){
            if(i>=0){
                carry+=a.charAt(i--)-'0';
            }
            if(j>=0){
                carry+=b.charAt(j--)-'0';
            }
            sb.append(carry%2);
            carry/=2;
        }
        return sb.reverse().toString();

    }
}
======================================================================================================================
2Q. Maximum Product Of Three Numbers
CODE
class Solution {
    public int maximumProduct(int[] nums) {
        int maxp1 = Integer.MIN_VALUE, maxp2 = Integer.MIN_VALUE, maxp3 = Integer.MIN_VALUE;
        int minp1 = Integer.MAX_VALUE, minp2 = Integer.MAX_VALUE;
        for (int ele : nums) {
            if(maxp1<=ele){
                maxp3=maxp2;
                maxp2=maxp1;
                maxp1=ele;
            }
            if(maxp2<=ele && ele<maxp1){
                maxp3=maxp2;
                maxp2=ele;
            }
            if(maxp3<=ele && ele<maxp2){
                maxp3=ele;
            }
            if(minp1>=ele){
                minp2=minp1;
                minp1=ele;
            }
            if(minp2>=ele && ele>minp1){
                minp2=ele;
            }
        }
        return Math.max(maxp1 * maxp2 * maxp3, minp1 * minp2 * maxp1);
    }
}
======================================================================================================================
3Q. Excel Sheet Column Title
CODE
class Solution {
    public String convertToTitle(int cn) {
        StringBuilder sb= new StringBuilder();
        String alph="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        if(cn<27){
            return String.valueOf(alph.charAt(cn-1));
        }
        while(cn>26){
            int temp= cn%26;
            System.out.println(temp);
            if(temp>0)
            {
                sb.append(alph.charAt(temp-1));
                cn=cn/26;
            }
            else{
                sb.append('Z');
                cn /= 26;
                cn -= 1;
            }
        }
        sb.append(alph.charAt(cn-1));
        return String.valueOf(sb.reverse());
    }
}
======================================================================================================================
4Q. Product Array Puzzle
CODE
class Solution 
{ 
    public static long[] productExceptSelf(int nums[], int n) 
    { 
        if (n == 1) {
            return new long[]{1};
        }
        long[] result = new long[n];
        long[] left = new long[n];
        long[] right = new long[n];
        left[0] = 1;
        right[n - 1] = 1;

        for (int i = 1; i < n; i++) {
            left[i] = nums[i - 1] * left[i - 1];
        }

        for (int j = n - 2; j >= 0; j--) {
            right[j] = nums[j + 1] * right[j + 1];
        }

        for (int i = 0; i < n; i++) {
            result[i] = left[i] * right[i];
        }

        return result;
    } 
}
======================================================================================================================
5Q.Minimum Moves To Equal Array Elements II
CODE
class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int med = nums[nums.length / 2], minMoves = 0;
        for (int n : nums){
            minMoves += Math.abs(n - med);
        }
        return minMoves;
    }
}
======================================================================================================================
6Q. Rotate Image
CODE
class Solution {
    public void rotate(int[][] matrix) {
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<i;j++){
                //swap
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;
            }
        }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix.length/2;j++){
                //swap
                int temp=matrix[i][j];
                matrix[i][j]=matrix[i][matrix.length-1-j];
                matrix[i][matrix.length-1-j]=temp;
            }
        }
    }
}
